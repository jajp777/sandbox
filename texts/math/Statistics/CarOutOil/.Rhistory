z = outer(x, y, f)
z[is.na(z)] = 0
library(RColorBrewer)
contour(x,y,z,col=rev(brewer.pal(11, "RdYlBu")), nlevels = 20)
optim(c(10,3),v.normal.lik.muvar,y=homeWork$consuption,method="BFGS",control=list(fnscale=-1))
optim(c(10,3),v.normal.lik.muvar,y=homeWork$consuption,method="BFGS",control=list(fnscale=1))
optim(c(10,3),v.normal.lik.muvar,y=homeWork$consuption,method="BFGS",control=list(fnscale=-1))
x = seq(5, 15, length= 20)
y = seq(0, 5, length= 20)
f = function(x, y) { v.normal.lik(x,y,homeWork$consuption) }
z = outer(x, y, f)
z[is.na(z)] = 0
library(RColorBrewer)
contour(x,y,z,col=rev(brewer.pal(11, "RdYlBu")), nlevels = 20)
optim(c(10,2),v.normal.lik.muvar,y=homeWork$consuption,method="BFGS",control=list(fnscale=-1))
optim(c(10,2),v.normal.lik.muvar,y=homeWork$consuption,method="BFGS")
normal.lik<-function(mu,sigma,y){
#sigma <- max(sigma, 0.01)
n<-length(y)
logl <- sum(dnorm(y, mean = mu, sd = sigma))/n
return(logl)
}
x = seq(5, 15, length= 20)
y = seq(0, 5, length= 20)
f = function(x, y) { v.normal.lik(x,y,homeWork$consuption) }
z = outer(x, y, f)
z[is.na(z)] = 0
library(RColorBrewer)
contour(x,y,z,col=rev(brewer.pal(11, "RdYlBu")), nlevels = 20)
optim(c(10,2),v.normal.lik.muvar,y=homeWork$consuption,method="BFGS")
normal.lik<-function(mu,sigma,y){
#sigma <- max(sigma, 0.01)
n<-length(y)
logl <- sum(log(dnorm(y, mean = mu, sd = sigma)))/n
return(logl)
}
x = seq(5, 15, length= 20)
y = seq(0, 5, length= 20)
f = function(x, y) { v.normal.lik(x,y,homeWork$consuption) }
z = outer(x, y, f)
z[is.na(z)] = 0
library(RColorBrewer)
contour(x,y,z,col=rev(brewer.pal(11, "RdYlBu")), nlevels = 20)
normal.lik<-function(mu,sigma,y){
#sigma <- max(sigma, 0.01)
n<-length(y)
logl <- sum(log(dnorm(y, mean = mu, sd = sigma)))/n
return(-logl)
}
z = outer(x, y, f)
z[is.na(z)] = 0
library(RColorBrewer)
contour(x,y,z,col=rev(brewer.pal(11, "RdYlBu")), nlevels = 20)
contour(x,y,z,col=rev(brewer.pal(11, "RdYlBu")), nlevels = 100)
contour(x,y,z,col=rev(brewer.pal(11, "RdYlBu")), nlevels = 1000)
contour(x,y,z,col=rev(brewer.pal(11, "RdYlBu")), nlevels = 5000)
contour(x,y,z,col=rev(brewer.pal(11, "RdYlBu")), nlevels = 10000)
optim(c(10,2),v.normal.lik.muvar,y=homeWork$consuption,method="BFGS")
optim(c(10,5),v.normal.lik.muvar,y=homeWork$consuption,method="BFGS")
optim(c(10,2),v.normal.lik.muvar,y=homeWork$consuption,method="BFGS")
normal.lik<-function(mu,sigma,y){
#sigma <- max(sigma, 0.01)
n<-length(y)
logl <- sum(log(dnorm(y, mean = mu, sd = sigma)))/n
return(-logl)
}
v.normal.lik.muvar <- function (theta,y){
#print(theta)
normal.lik(theta[0],theta[1],y)
}
v.normal.lik <- function (mu, sigma, y){
mapply(function(m,s) normal.lik(m,s,y), mu, sigma)
}
x = seq(5, 15, length= 20)
y = seq(0, 5, length= 20)
f = function(x, y) { v.normal.lik(x,y,homeWork$consuption) }
z = outer(x, y, f)
z[is.na(z)] = 0
library(RColorBrewer)
contour(x,y,z,col=rev(brewer.pal(11, "RdYlBu")), nlevels = 10000)
optim(c(10,2),v.normal.lik.muvar,y=homeWork$consuption,method="BFGS")
optim(c(12,4),v.normal.lik.muvar,y=homeWork$consuption,method="BFGS")
normal.lik.muvar <- function (theta,y){
#print(theta)
normal.lik(theta[0],theta[1],y)
}
optim(c(12,4),normal.lik.muvar,y=homeWork$consuption,method="BFGS")
contour(x,y,z,col=rev(brewer.pal(11, "RdYlBu")), nlevels = 10000)
optim(c(12,4),normal.lik.muvar,y=homeWork$consuption,method="BFGS", control = list(fnscale=0.1))
optim(c(12,4),normal.lik.muvar,y=homeWork$consuption,method="BFGS", control = list(fnscale=0.01))
optim(c(12,4),normal.lik.muvar,y=homeWork$consuption,method="BFGS", control = list(fnscale=0.001))
optim(c(12,4),normal.lik.muvar,y=homeWork$consuption,method="BFGS", control = list(fnscale=100))
normal.lik.muvar <- function (theta,y){
print(theta)
normal.lik(theta[0],theta[1],y)
}
optim(c(12,4),normal.lik.muvar,y=homeWork$consuption,method="BFGS", control = list(fnscale=100))
normal.lik.muvar <- function (theta,y){
print(theta)
normal.lik(theta[0],theta[1],y)*100
}
optim(c(12,4),normal.lik.muvar,y=homeWork$consuption,method="BFGS")
normal.lik.muvar <- function (theta,y){
r <- normal.lik(theta[0],theta[1],y)*100
print(c(theta,r)
r
}
v.normal.lik <- function (mu, sigma, y){
mapply(function(m,s) normal.lik(m,s,y), mu, sigma)
}
x = seq(5, 15, length= 20)
y = seq(0, 5, length= 20)
f = function(x, y) { v.normal.lik(x,y,homeWork$consuption) }
z = outer(x, y, f)
z[is.na(z)] = 0
library(RColorBrewer)
contour(x,y,z,col=rev(brewer.pal(11, "RdYlBu")), nlevels = 10000)
optim(c(12,4),normal.lik.muvar,y=homeWork$consuption,method="BFGS")
normal.lik.muvar <- function (theta,y){
r <- normal.lik(theta[0],theta[1],y)*100
print(c(theta),r)
r
}
optim(c(12,4),normal.lik.muvar,y=homeWork$consuption,method="BFGS")
normal.lik.muvar <- function (theta,y){
r <- normal.lik(theta[0],theta[1],y)*100
print(c(theta,r))
r
}
optim(c(12,4),normal.lik.muvar,y=homeWork$consuption,method="BFGS")
normal.lik(12,4,homeWork$consuption)
normal.lik.muvar <- function (theta,y){
r <- normal.lik(theta[0],theta[1],y)*100
print(c(theta,r))
print(y)
r
}
optim(c(12,4),normal.lik.muvar,y=homeWork$consuption,method="BFGS")
normal.lik.muvar <- function (theta,y){
r <- normal.lik(theta[0],theta[1],y)*100
print(c(theta,r))
r
}
optim(c(12,4),normal.lik.muvar,y=homeWork$consuption,method="BFGS")
optim(c(12,4),normal.lik.muvar,y=homeWork$consuption,method="BFGS")
normal.lik<-function(mu,sigma,y){
#sigma <- max(sigma, 0.01)
n<-length(y)
logl <- sum(log(dnorm(y, mean = mu, sd = sigma)))/n
print(logl)
return(-logl)
}
normal.lik.muvar <- function (theta,y){
r <- normal.lik(theta[0],theta[1],y)*100
print(c(theta,r))
r
}
optim(c(12,4),normal.lik.muvar,y=homeWork$consuption,method="BFGS")
normal.lik<-function(mu,sigma,y){
#sigma <- max(sigma, 0.01)
n<-length(y)
logl <- sum(log(dnorm(y, mean = mu, sd = sigma)))/n
print(c(mu,sigma,logl))
return(-logl)
}
optim(c(12,4),normal.lik.muvar,y=homeWork$consuption,method="BFGS")
normal.lik<-function(mu,sigma,y){
#sigma <- max(sigma, 0.01)
n<-length(y)
logl <- sum(log(dnorm(y, mean = mu, sd = sigma)))/n
print(c(mu,sigma,n,logl))
return(-logl)
}
optim(c(12,4),normal.lik.muvar,y=homeWork$consuption,method="BFGS")
normal.lik<-function(mu,sigma,y){
#sigma <- max(sigma, 0.01)
n<-length(y)
logl <- sum(log(dnorm(y, mean = mu, sd = sigma)))/n
print(c(999,mu,sigma,n,logl))
return(-logl)
}
normal.lik.muvar <- function (theta,y){
r <- normal.lik(theta[0],theta[1],y)*100
print(c(998,theta,r))
r
}
optim(c(12,4),normal.lik.muvar,y=homeWork$consuption,method="BFGS")
normal.lik<-function(mu,sigma,y){
#sigma <- max(sigma, 0.01)
n<-length(y)
logl <- sum(log(dnorm(y, mean = mu, sd = sigma)))/n
print(c(999,mu,sigma,888, length(y),888,logl))
return(-logl)
}
normal.lik.muvar <- function (theta,y){
r <- normal.lik(theta[0],theta[1],y)*100
print(c(998,theta,r,length(y)))
r
}
optim(c(12,4),normal.lik.muvar,y=homeWork$consuption,method="BFGS")
normal.lik<-function(mu,sigma,y){
#sigma <- max(sigma, 0.01)
n<-length(y)
logl <- sum(log(dnorm(y, mean = mu, sd = sigma)))/n
print(c(999,mu,sigma,888, length(y),888,logl))
return(-logl)
}
normal.lik.muvar <- function (theta,y){
r <- normal.lik(theta[0],theta[1],y)*100
print(c(998,theta[0],444,theta[1],555,r,length(y)))
r
}
optim(c(12,4),normal.lik.muvar,y=homeWork$consuption,method="BFGS")
normal.lik.muvar <- function (theta,y){
r <- normal.lik(theta[0],theta[1],y)*100
print(c(997,theta))
print(c(998,theta[0],444,theta[1],555,r,length(y)))
r
}
optim(c(12,4),normal.lik.muvar,y=homeWork$consuption,method="BFGS")
normal.lik.muvar <- function (theta,y){
r <- normal.lik(theta[0],theta[1],y)*100
print(c(997,theta))
print(c(998,theta[1],444,theta[2],555,r,length(y)))
r
}
optim(c(12,4),normal.lik.muvar,y=homeWork$consuption,method="BFGS")
normal.lik.muvar <- function (theta,y){
normal.lik(theta[1],theta[2],y)*100
}
optim(c(12,4),normal.lik.muvar,y=homeWork$consuption,method="BFGS")
normal.lik<-function(mu,sigma,y){
sigma <- max(sigma, 0.0001)
n<-length(y)
logl <- sum(log(dnorm(y, mean = mu, sd = sigma)))/n
return(-logl)
}
normal.lik.muvar <- function (theta,y){
normal.lik(theta[1],theta[2],y)*100
}
optim(c(12,4),normal.lik.muvar,y=homeWork$consuption,method="BFGS")
comsumption = read.csv("consumption.csv")
read.csv("consumption.csv")
setwd("C:/github/sandbox/texts/math/Statistics/CarOutOil")
comsumption = read.csv("consumption.csv")
homeWork = consuption[consumption$type == 1,]
workHome = consuption[consumption$type == 2,]
comsumption = read.csv("consumption.csv")
homeWork = comsumption[comsumption$type == 1,]
workHome = comsumption[comsumption$type == 2,]
png(filename="homeWork.plot.png")
plot(homeWork$day, homeWork$consumption)
dev.off()
png(filename="homeWork.hist.png")
hist(homeWork$consumption)
dev.off()
plotMLE <- function(x,y,steps = 20, levels = 10000) {
x = seq(x[1], x[2], length= 20)
y = seq(y[1], x[2], length= 20)
f = function(x, y) { v.normal.lik(x,y,homeWork$consuption) }
z = outer(x, y, f)
z[is.na(z)] = 0
library(RColorBrewer)
contour(x,y,z,col=rev(brewer.pal(11, "RdYlBu")), nlevels = 10000)
}
plotMLE(x=c(5,15),y=c(0,5), steps=20, levels=1000)
c(1,2)[1]
c(1,2)[2]
c(1,4)[2]
plotMLE(x=c(5,15),y=c(0,5))
plotMLE <- function(data, x,y,steps = 20, levels = 10000) {
x = seq(x[1], x[2], length= 20)
y = seq(y[1], x[2], length= 20)
f = function(x, y) { v.normal.lik(x,y,data) }
z = outer(x, y, f)
z[is.na(z)] = 0
library(RColorBrewer)
contour(x,y,z,col=rev(brewer.pal(11, "RdYlBu")), nlevels = 10000)
}
plotMLE(homeWork$consuption, x=c(5,15),y=c(0,5))
plotMLE <- function(data, x,y,steps = 20, levels = 10000) {
x = seq(x[1], x[2], length= 20)
y = seq(y[1], x[2], length= 20)
f = function(x, y) { print(c(x,y,data); v.normal.lik(x,y,data) }
z = outer(x, y, f)
z[is.na(z)] = 0
library(RColorBrewer)
contour(x,y,z,col=rev(brewer.pal(11, "RdYlBu")), nlevels = 10000)
}
plotMLE(homeWork$consuption, x=c(5,15),y=c(0,5))
optim(c(12,4),normal.lik.muvar,y=homeWork$consuption,method="BFGS")
plotMLE <- function(data, x,y,steps = 20, levels = 10000) {
x = seq(x[1], x[2], length= 20)
y = seq(y[1], x[2], length= 20)
f = function(x, y) {
print(c(x,y,data))
v.normal.lik(x,y,data)
}
z = outer(x, y, f)
z[is.na(z)] = 0
library(RColorBrewer)
contour(x,y,z,col=rev(brewer.pal(11, "RdYlBu")), nlevels = 10000)
}
plotMLE(homeWork$consuption, x=c(5,15),y=c(0,5))
plotMLE <- function(data, x, y, steps = 20, levels = 10000) {
x = seq(x[1], x[2], length= 20)
y = seq(y[1], y[2], length= 20)
f = function(x, y) {
v.normal.lik(x,y,data)
}
z = outer(x, y, f)
z[is.na(z)] = 0
library(RColorBrewer)
contour(x,y,z,col=rev(brewer.pal(11, "RdYlBu")), nlevels = 10000)
}
plotMLE(homeWork$consuption, x=c(5,15),y=c(0,5))
normal.lik<-function(mu,sigma,y){
print(c(mu,sigma))
sigma <- max(sigma, 0.0001)
n<-length(y)
logl <- sum(log(dnorm(y, mean = mu, sd = sigma)))/n
return(-logl)
}
normal.lik.muvar <- function (theta,y){
normal.lik(theta[1],theta[2],y)*100
}
v.normal.lik <- function (mu, sigma, y){
mapply(function(m,s) normal.lik(m,s,y), mu, sigma)
}
plotMLE <- function(data, x, y, steps = 20, levels = 10000) {
x = seq(x[1], x[2], length= 20)
y = seq(y[1], y[2], length= 20)
f = function(x, y) {
v.normal.lik(x,y,data)
}
z = outer(x, y, f)
z[is.na(z)] = 0
library(RColorBrewer)
contour(x,y,z,col=rev(brewer.pal(11, "RdYlBu")), nlevels = 10000)
}
plotMLE(homeWork$consuption, x=c(5,15),y=c(0,5))
plotMLE(homeWork$consuption, x=c(5,15),y=c(0.01,5))
normal.lik<-function(mu,sigma,y){
print(y)
sigma <- max(sigma, 0.0001)
n<-length(y)
logl <- sum(log(dnorm(y, mean = mu, sd = sigma)))/n
return(-logl)
}
normal.lik.muvar <- function (theta,y){
normal.lik(theta[1],theta[2],y)*100
}
v.normal.lik <- function (mu, sigma, y){
mapply(function(m,s) normal.lik(m,s,y), mu, sigma)
}
library(RColorBrewer)
plotMLE <- function(data, x, y, steps = 20, levels = 10000) {
x = seq(x[1], x[2], length= 20)
y = seq(y[1], y[2], length= 20)
f = function(x, y) {
v.normal.lik(x,y,data)
}
z = outer(x, y, f)
z[is.na(z)] = 0
contour(x,y,z,col=rev(brewer.pal(11, "RdYlBu")), nlevels = 10000)
}
plotMLE(homeWork$consuption, x=c(5,15),y=c(0.01,5))
homeWork$consumption
plotMLE(homeWork$consumption, x=c(5,15),y=c(0.01,5))
normal.lik<-function(mu,sigma,y){
sigma <- max(sigma, 0.0001)
n<-length(y)
logl <- sum(log(dnorm(y, mean = mu, sd = sigma)))/n
return(-logl)
}
normal.lik.muvar <- function (theta,y){
normal.lik(theta[1],theta[2],y)*100
}
v.normal.lik <- function (mu, sigma, y){
mapply(function(m,s) normal.lik(m,s,y), mu, sigma)
}
library(RColorBrewer)
plotMLE <- function(data, x, y, steps = 20, levels = 10000) {
x = seq(x[1], x[2], length= 20)
y = seq(y[1], y[2], length= 20)
f = function(x, y) {
v.normal.lik(x,y,data)
}
z = outer(x, y, f)
z[is.na(z)] = 0
contour(x,y,z,col=rev(brewer.pal(11, "RdYlBu")), nlevels = 10000)
}
plotMLE(homeWork$consumption, x=c(5,15),y=c(0.01,5))
plotMLE(homeWork$consumption, x=c(5,15),y=c(0.01,5))
plotMLE(homeWork$consumption, x=c(5,15),y=c(0,5))
png(filename="homeWork.likelihood.png")
plotMLE(homeWork$consumption, x=c(5,15),y=c(0,5))
dev.off()
plotMLE(homeWork$consumption, x=c(5,15),y=c(0,5), levels = 100)
plotMLE(homeWork$consumption, x=c(5,15),y=c(0,5), levels = 100)
plotMLE <- function(data, x, y, steps = 20, levels = 10000) {
x = seq(x[1], x[2], length= 20)
y = seq(y[1], y[2], length= 20)
f = function(x, y) {
v.normal.lik(x,y,data)
}
z = outer(x, y, f)
z[is.na(z)] = 0
contour(x,y,z,col=rev(brewer.pal(11, "RdYlBu")), nlevels = levels)
}
plotMLE(homeWork$consumption, x=c(5,15),y=c(0,5), levels = 100)
plotMLE(homeWork$consumption, x=c(5,15),y=c(0,5), levels = 200)
plotMLE(homeWork$consumption, x=c(5,15),y=c(0,5), levels = 2000)
plotMLE <- function(data, x, y, steps = 20, levels = 10000) {
x = seq(x[1], x[2], length= 20)
y = seq(y[1], y[2], length= 20)
f = function(x, y) {
v.normal.lik(x,y,data)
}
z = outer(x, y, f)
z[is.na(z)] = 0
contour(x,y,z,col=rev(brewer.pal(11, "RdYlBu")), nlevels = levels,
xlab="mean", ylab="sd")
}
plotMLE(homeWork$consumption, x=c(5,15),y=c(0,5), levels = 2000)
plotMLE <- function(data, x, y, steps = 20, levels = 10000) {
x = seq(x[1], x[2], length= 20)
y = seq(y[1], y[2], length= 20)
f = function(x, y) {
v.normal.lik(x,y,data)
}
z = outer(x, y, f)
z[is.na(z)] = 0
contour(x,y,z,col=rev(brewer.pal(11, "RdYlBu")), nlevels = levels,
xlab="mean", ylab="standard deviation")
}
plotMLE(homeWork$consumption, x=c(5,15),y=c(0,5), levels = 2000)
png(filename="homeWork.likdev.off().png")
plotMLE(homeWork$consumption, x=c(5,15),y=c(0,5), levels = 2000)
png(filename="homeWork.likelihood.png")
plotMLE(homeWork$consumption, x=c(5,15),y=c(0,5), levels = 2000)
dev.off()
optim(c(12,4),normal.lik.muvar,y=homeWork$consuption,method="BFGS")
normal.lik.muvar <- function (theta,y){
normal.lik(theta[1],theta[2],y)
}
optim(c(12,4),normal.lik.muvar,y=homeWork$consuption,method="BFGS")
optim(c(12,4),normal.lik.muvar,y=homeWork$consumption,method="BFGS")
plotMLE(homeWork$consumption, x=c(5,15),y=c(0,5), levels = 2000)
abline(h=1.70105, lty=2)
abline(v=10.01983, lty=2)
png(filename="homeWork.likelihood.withlines.png")
plotMLE(homeWork$consumption, x=c(5,15),y=c(0,5), levels = 2000)
abline(h=1.70105, lty=2)
abline(v=10.01983, lty=2)
dev.off()
plotGaussian(10, 1.7)
plotGaussian <- function(u, sigma, color = "black"){
x <- seq(-4, 4, length=100)
hx <- dnorm(x, mean = u, sd = sigma)
plot(x, hx, type="l", lty=2, xlab="x value", ylab="Density", main="Gaussian", col = color)
}
plotGaussian(10, 1.7)
plotGaussian <- function(start = -1, end = 1, u, sigma, color = "black"){
x <- seq(start, end, length=100)
hx <- dnorm(x, mean = u, sd = sigma)
plot(x, hx, type="l", lty=2, xlab="x value", ylab="Density", main="Gaussian", col = color)
}
plotGaussian(5, 15, 10, 1.7)
hist(homeWork$consumption)
plotGaussian(5, 15, 10, 1.7)
plot.new()
plotGaussian(5, 15, 10, 1.7)
hist(homeWork$consumption)
plotGaussian <- function(start = -1, end = 1, u, sigma, color = "black"){
x <- seq(start, end, length=100)
hx <- dnorm(x, mean = u, sd = sigma)
lines(x, hx, type="l", lty=2, xlab="x value", ylab="Density", main="Gaussian", col = color)
}
plot.new()
plotGaussian(5, 15, 10, 1.7)
hist(homeWork$consumption)
hist(homeWork$consumption)
plotGaussian(5, 15, 10, 1.7)
plotGaussian <- function(start = -1, end = 1, u, sigma, color = "black"){
x <- seq(start, end, length=100)
hx <- dnorm(x, mean = u, sd = sigma)*60
lines(x, hx, type="l", lty=2, xlab="x value", ylab="Density", main="Gaussian", col = color)
}
plot.new()
hist(homeWork$consumption)
plotGaussian(5, 15, 10, 1.7)
plotGaussian(5, 15, 10, 1.7, 200)
plotGaussian <- function(start = -1, end = 1, u, sigma, scale, color = "black"){
x <- seq(start, end, length=100)
hx <- dnorm(x, mean = u, sd = sigma)*scale
lines(x, hx, type="l", lty=2, xlab="x value", ylab="Density", main="Gaussian", col = color)
}
plotGaussian(5, 15, 10, 1.7, 200)
plotGaussian(5, 15, 10, 1.7, 250)
plot.new()
hist(homeWork$consumption)
plotGaussian(5, 15, 10, 1.7, 250)
plotGaussian(5, 15, 10, 1.7, 250, "red")
plot.new()
hist(homeWork$consumption)
plotGaussian(5, 15, 10, 1.7, 250, "red")
png(filename="homeWork.hist.model.png")
plot.new()
hist(homeWork$consumption)
plotGaussian(5, 15, 10, 1.7, 250, "red")
dev.off()
