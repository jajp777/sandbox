}
PWnGivenWnminus1 <- function (wnminus1,wn){
bigram <- paste(c(wnminus1,wn), collapse = "_")
countBi(bigram)/countUni(wnminus1)
}
PWnGivenWnminus1("i","would")
Pmle <- function(words){
ngram <- paste(words, collapse = "_")
ngramminus1 <- paste(head(words, n = length(words) -1), collapse = "_")
print(ngram)
print(ngramminus1)
#countBi(bigram)/countUni(wnminus1)
}
Pmle(c("i","would"))
Pmle(c("i","would","the"))
Pmle(c("i","would","the"))
Pmle <- function(words){
ngram <- paste(words, collapse = "_")
ngramminus1 <- paste(head(words, n = length(words) -1), collapse = "_")
countFreq(ngram)/countFreq(ngramminus1)
}
Pmle(c("i","would","the"))
countFreq <- function(ngram){
size <- length(ngram)
if(size == 1) tablefreq <- unigs
else if(size == 2) tablefreq <- bigrs
else if(size == 3) tablefreq <- trigs
r <- tablefreq[ngram == uni]
if(length(r) == 0) 0
else as.numeric(r$freq)
}
Pmle <- function(words){
ngram <- paste(words, collapse = "_")
ngramminus1 <- paste(head(words, n = length(words) -1), collapse = "_")
countFreq(ngram)/countFreq(ngramminus1)
}
Pmle(c("i","would","the"))
countFreq <- function(phrase){
size <- length(ngram)
if(size == 1) tablefreq <- unigs
else if(size == 2) tablefreq <- bigrs
else if(size == 3) tablefreq <- trigs
r <- tablefreq[ngram == phrase]
if(length(r) == 0) 0
else as.numeric(r$freq)
}
Pmle <- function(words){
ngram <- paste(words, collapse = "_")
ngramminus1 <- paste(head(words, n = length(words) -1), collapse = "_")
countFreq(ngram)/countFreq(ngramminus1)
}
Pmle(c("i","would","the"))
countFreq <- function(phrase){
size <- length(phrase)
if(size == 1) tablefreq <- unigs
else if(size == 2) tablefreq <- bigrs
else if(size == 3) tablefreq <- trigs
r <- tablefreq[ngram == phrase]
if(length(r) == 0) 0
else as.numeric(r$freq)
}
Pmle <- function(words){
ngram <- paste(words, collapse = "_")
ngramminus1 <- paste(head(words, n = length(words) -1), collapse = "_")
countFreq(ngram)/countFreq(ngramminus1)
}
Pmle(c("i","would","the"))
Pmle(c("i","would"))
countFreq <- function(tokens){
size <- length(tokens)
if(size == 1) tablefreq <- unigs
else if(size == 2) tablefreq <- bigrs
else if(size == 3) tablefreq <- trigs
phrase <- paste(tokens, collapse = "_")
r <- tablefreq[ngram == phrase]
if(length(r) == 0) 0
else as.numeric(r$freq)
}
Pmle <- function(words){
countFreq(words)/countFreq(head(words, n = length(words) - 1))
}
Pmle(c("i","would"))
Pmle(c("i","would","the"))
Pmle(c("i","would","sleep"))
Pmle(c("i","would","sleep"))
Pmle(c("i","would","eat"))
Pmle(c("i","would","give"))
Pmle(c("i","would","die"))
Pmle(c("and","id","sleep"))
Pmle(c("and","id","eat"))
Pmle(c("and","id","give"))
Pmle(c("and","id","die"))
tetrags <- getNgramTables(4, ltcorpus)
Pmle(c("and","i", "would","sleep"))
countFreq <- function(tokens){
size <- length(tokens)
if(size == 1) tablefreq <- unigs
else if(size == 2) tablefreq <- bigrs
else if(size == 3) tablefreq <- trigs
else if(size == 4) tablefreq <- tetrags
phrase <- paste(tokens, collapse = "_")
r <- tablefreq[ngram == phrase]
if(length(r) == 0) 0
else as.numeric(r$freq)
}
Pmle <- function(words){
countFreq(words)/countFreq(head(words, n = length(words) - 1))
}
Pmle(c("and","i", "would","sleep"))
Pmle(c("and","i", "would","eat"))
Pmle(c("and","i", "would","give"))
Pmle(c("and","i", "would","die"))
Pmle(c("live", "and","id", "sleep"))
Pmle(c("live", "and","id", "eat"))
Pmle(c("live", "and","id", "give"))
Pmle(c("live", "and","id", "die"))
Pmle(c("i","would","sleep"))
Pmle(c("i","would","eat"))
Pmle(c("i","would","give"))
Pmle(c("i","would","die"))
Pmle(c("and","i", "would","sleep"))
Pmle(c("and","i", "would","eat"))
Pmle(c("and","i", "would","give"))
Pmle(c("and","i", "would","die"))
save(unigs, bigrs, trigs, tetrags, file = "ngrams.rdata")
pentags <- getNgramTables(5, ltcorpus)
save(unigs, bigrs, trigs, tetrags, pentags, file = "ngrams.rdata")
Pmle(c("live", "and", "i", "would", "sleep"))
countFreq <- function(tokens){
size <- length(tokens)
if(size == 1) tablefreq <- unigs
else if(size == 2) tablefreq <- bigrs
else if(size == 3) tablefreq <- trigs
else if(size == 4) tablefreq <- tetrags
else if(size == 5) tablefreq <- pentags
phrase <- paste(tokens, collapse = "_")
r <- tablefreq[ngram == phrase]
if(length(r) == 0) 0
else as.numeric(r$freq)
}
countFreq <- function(tokens){
size <- length(tokens)
if(size == 1) tablefreq <- unigs
else if(size == 2) tablefreq <- bigrs
else if(size == 3) tablefreq <- trigs
else if(size == 4) tablefreq <- tetrags
else if(size == 5) tablefreq <- pentags
phrase <- paste(tokens, collapse = "_")
r <- tablefreq[ngram == phrase]
if(length(r) == 0) 0
else as.numeric(r$freq)
}Pmle <- function(words){
countFreq(words)/countFreq(head(words, n = length(words) - 1))
}
Pmle <- function(words){
countFreq(words)/countFreq(head(words, n = length(words) - 1))
}
Pmle(c("live", "and", "i", "would", "sleep"))
Pmle(c("live", "and", "i", "would", "eat"))
Pmle(c("live", "and", "i", "would", "give"))
Pmle(c("live", "and", "i", "would", "die"))
Pmle(c("live", "and", "id", "sleep"))
Pmle(c("live", "and", "id", "eat"))
Pmle(c("live", "and", "id", "give"))
Pmle(c("live", "and", "id", "die"))
Pmle(c("live", "and", "i", "would", "sleep"))
Pmle(c("live", "and", "i", "would", "eat"))
Pmle(c("live", "and", "i", "would", "give"))
Pmle(c("live", "and", "i", "would", "die"))
Pmle(c("and","i", "would","give"))
Pmle(c("and","i", "would","die"))
Pmle(c("i","would","give"))
Pmle(c("and","i", "would","give"))
Pmle(c("and","i", "would","die"))
Pmle(c("i","would","sleep"))
Pmle(c("i","would","eat"))
Pmle(c("i","would","give"))
Pmle(c("i","would","die"))
Pmle(c("and","id","sleep"))
Pmle(c("and","id","eat"))
Pmle(c("and","id","give"))
Pmle(c("and","id","die"))
Pmle(c("i","would","sleep"))
Pmle(c("i","would","eat"))
Pmle(c("i","would","give"))
Pmle(c("i","would","die"))
Pmle(c("and","id","sleep"))
Pmle(c("and","id","eat"))
Pmle(c("and","id","give"))
Pmle(c("and","id","die"))
Pmle(c("and","i", "would","sleep"))
Pmle(c("and","i", "would","eat"))
Pmle(c("and","i", "would","give"))
Pmle(c("and","i", "would","die"))
Pmle(c("live", "and","id", "sleep"))
Pmle(c("live", "and","id", "eat"))
Pmle(c("live", "and","id", "give"))
Pmle(c("live", "and","id", "die"))
Pmle(c("live", "and", "i", "would", "sleep"))
Pmle(c("live", "and", "i", "would", "eat"))
Pmle(c("live", "and", "i", "would", "give"))
Pmle(c("live", "and", "i", "would", "die"))
Pmle(c("live", "and", "id", "sleep"))
Pmle(c("live", "and", "id", "eat"))
Pmle(c("live", "and", "id", "give"))
Pmle(c("live", "and", "id", "die"))
Pmle(c("id", "live", "and", "id", "die"))
Pmle(c("id", "live", "and", "id", "die"))
Pmle(c("id", "live", "and", "id"))
Pmle(c("live", "and", "i", "would", "die"))
Pmle(c("live", "and", "i", "would", "sleep"))
Pmle(c("live", "and", "i", "would", "eat"))
Pmle(c("live", "and", "i", "would", "give"))
Pmle(c("live", "and", "i", "would", "die"))
Pmle(c("live", "and","id", "sleep"))
Pmle(c("live", "and","id", "eat"))
Pmle(c("live", "and","id", "give"))
Pmle(c("live", "and","id", "die"))
Pmle(c("and","i", "would","give"))
Pmle(c("and","i", "would","die"))
Pmle(c("live", "and","id", "sleep"))
Pmle(c("live", "and","id", "eat"))
Pmle(c("live", "and","id", "give"))
Pmle(c("live", "and","id", "die"))
Pmle(c("i","would","sleep"))
Pmle(c("i","would","eat"))
Pmle(c("i","would","give"))
Pmle(c("i","would","die"))
Pmle(c("live", "and", "i", "would", "sleep"))
Pmle(c("live", "and", "i", "would", "eat"))
Pmle(c("live", "and", "i", "would", "give"))
Pmle(c("live", "and", "i", "would", "die"))
Pmle(c("live", "and", "id", "sleep"))
Pmle(c("live", "and", "id", "eat"))
Pmle(c("live", "and", "id", "give"))
Pmle(c("live", "and", "id", "die"))
Pmle(c("id", "live", "and", "id"))
Pmle(c("id", "live", "and", "id", "die"))
Pmle(c("live", "and","id", "sleep"))
Pmle(c("live", "and","id", "eat"))
Pmle(c("live", "and","id", "give"))
Pmle(c("live", "and","id", "die"))
Pmle(c("live", "and","id", "sleep"))
Pmle(c("live", "and","id", "eat"))
Pmle(c("live", "and","id", "give"))
Pmle(c("live", "and","id", "die"))
Pmle(c("and","i", "would","sleep"))
Pmle(c("and","i", "would","eat"))
Pmle(c("and","i", "would","give"))
Pmle(c("and","i", "would","die"))
countFreq <- function(tokens){
size <- length(tokens)
if(size == 1) tablefreq <- unigs
else if(size == 2) tablefreq <- bigrs
else if(size == 3) tablefreq <- trigs
else if(size == 4) tablefreq <- tetrags
else if(size == 5) tablefreq <- pentags
phrase <- paste(tokens, collapse = "_")
print(phrase)
r <- tablefreq[ngram == phrase]
if(length(r) == 0) 0
else as.numeric(r$freq)
}
Pmle(c("live", "and", "i", "would", "die"))
1:5
1:(5-2)
head(c("a","b","c","d","e"), n =1:3)
head(c("a","b","c","d","e"), n = 1:3)
sapply(1:3,function(x) c("a","b","c","d","e")[x:(x+1)])
sapply(1:3,function(x) c("a","b","c","d","e")[x:(x)])
sapply(1:3,function(x) c("a","b","c","d","e")[x:1])
sapply(1:3,function(x) c("a","b","c","d","e")[x:(x+1)])
c("a","b","c","d","e")[x:(x+1)]
c("a","b","c","d","e")[2:+1]
c("a","b","c","d","e")[2:3]
sapply(1:3,function(x) x)
lapply(1:3,function(x) x)
lapply(1:3,function(x) c("a","b","c","d","e")[x:(x+1)])
Pmle <- function(words, size){
lapply(1:(length(words)-size),function(x) words[x:(x+size)])
#countFreq(words)/countFreq(head(words, n = length(words) - 1))
}
Pmle(c("i","would","sleep"))
Pmle <- function(words, size=2){
lapply(1:(length(words)-size),function(x) words[x:(x+size)])
#countFreq(words)/countFreq(head(words, n = length(words) - 1))
}
Pmle(c("i","would","sleep"))
Pmle <- function(words, size=2){
lapply(1:(length(words)-size),function(x) words[x:(x+size-1)])
#countFreq(words)/countFreq(head(words, n = length(words) - 1))
}
Pmle(c("i","would","sleep"))
Pmle <- function(words, size=2){
lapply(1:(length(words)-size+1),function(x) words[x:(x+size-1)])
#countFreq(words)/countFreq(head(words, n = length(words) - 1))
}
Pmle(c("i","would","sleep"))
Pmle <- function(words, size=2){
lapply(1:(length(words)-size+1),function(x) {
words[x:(x+size-1)]
})
#countFreq(words)/countFreq(head(words, n = length(words) - 1))
}
Pmle(c("i","would","sleep"))
Pmle <- function(words, size=2){
lapply(1:(length(words)-size+1),function(x) {
currentGram <- words[x:(x+size-1)]
countFreq(currentGram)/countFreq(head(currentGram, n = 1))
})
#countFreq(words)/countFreq(head(words, n = length(words) - 1))
}
Pmle(c("i","would","sleep"))
countFreq <- function(tokens){
size <- length(tokens)
if(size == 1) tablefreq <- unigs
else if(size == 2) tablefreq <- bigrs
else if(size == 3) tablefreq <- trigs
else if(size == 4) tablefreq <- tetrags
else if(size == 5) tablefreq <- pentags
phrase <- paste(tokens, collapse = "_")
r <- tablefreq[ngram == phrase]
if(length(r) == 0) 0
else as.numeric(r$freq)
}
Pmle <- function(words, size=2){
lapply(1:(length(words)-size+1),function(x) {
currentGram <- words[x:(x+size-1)]
countFreq(currentGram)/countFreq(head(currentGram, n = 1))
})
#countFreq(words)/countFreq(head(words, n = length(words) - 1))
}
Pmle(c("i","would","sleep"))
Pmle <- function(words, size=2){
sapply(1:(length(words)-size+1),function(x) {
currentGram <- words[x:(x+size-1)]
log(countFreq(currentGram)/countFreq(head(currentGram, n = 1)))
})
#countFreq(words)/countFreq(head(words, n = length(words) - 1))
}
Pmle(c("i","would","sleep"))
Pmle <- function(words, size=2){
sum(sapply(1:(length(words)-size+1),function(x) {
currentGram <- words[x:(x+size-1)]
log(countFreq(currentGram)/countFreq(head(currentGram, n = 1)))
}))
#countFreq(words)/countFreq(head(words, n = length(words) - 1))
}
Pmle(c("i","would","sleep"))
Pmle(c("i","would","sleep"))
Pmle(c("i","would","eat"))
Pmle(c("i","would","give"))
Pmle(c("i","would","die"))
Pmle(c("and","id","sleep"))
Pmle(c("and","id","eat"))
Pmle(c("and","id","give"))
Pmle(c("and","id","die"))
Pmle(c("and","i", "would","sleep"))
Pmle(c("and","i", "would","eat"))
Pmle(c("and","i", "would","give"))
Pmle(c("and","i", "would","die"))
Pmle(c("live", "and","id", "sleep"))
Pmle(c("live", "and","id", "eat"))
Pmle(c("live", "and","id", "give"))
Pmle(c("live", "and","id", "die"))
Pmle(c("live", "and", "i", "would", "sleep"))
Pmle(c("live", "and", "i", "would", "eat"))
Pmle(c("live", "and", "i", "would", "give"))
Pmle(c("live", "and", "i", "would", "die"))
Pmle(c("live", "and", "id", "sleep"))
Pmle(c("live", "and", "id", "eat"))
Pmle(c("live", "and", "id", "give"))
Pmle(c("live", "and", "id", "die"))
Pmle(c("id", "live", "and", "id"))
Pmle(c("id", "live", "and", "id", "die"))
Pmle(c("and","i", "would","sleep"),3)
Pmle(c("and","i", "would","eat"),3)
Pmle(c("and","i", "would","give"),3)
Pmle(c("and","i", "would","die"),3)
Pmle(c("and","i", "would","die"),3)
Pmle(c("and","i", "would","give"),3)
Pmle(c("and","i", "would","die"),3)
Pmle(c("and","i", "would","give"))
Pmle(c("and","i", "would","die"))
Pmle(c("live", "and", "i", "would", "give"))
Pmle(c("live", "and", "i", "would", "die"))
Pmle(c("live", "and", "i", "would", "sleep"))
Pmle <- function(words, size=2){
sum(sapply(1:(length(words)-size+1),function(x) {
currentGram <- words[x:(x+size-1)]
log(countFreq(currentGram)/countFreq(head(currentGram, n = size-1)))
}))
#countFreq(words)/countFreq(head(words, n = length(words) - 1))
}
Pmle(c("i","would","sleep"))
Pmle(c("and","i", "would","sleep"),3)
Pmle(c("and","i", "would","eat"),3)
Pmle(c("and","i", "would","give"))
Pmle(c("and","i", "would","die"))
Pmle(c("live", "and","id", "sleep"))
Pmle(c("live", "and","id", "eat"))
Pmle(c("live", "and","id", "give"))
Pmle(c("live", "and","id", "die"))
Pmle(c("live", "and", "i", "would", "sleep"))
Pmle(c("live", "and", "i", "would", "eat"))
Pmle(c("live", "and", "i", "would", "give"))
Pmle(c("live", "and", "i", "would", "die"))
Pmle(c("live", "and", "id", "sleep"))
Pmle(c("live", "and", "id", "eat"))
Pmle(c("live", "and", "id", "give"))
Pmle(c("live", "and", "id", "die"))
Pmle(c("id", "live", "and", "id"))
Pmle(c("id", "live", "and", "id", "die"))
Pmle(c("live", "and", "i", "would", "die"))
Pmle(c("live", "and", "i", "would", "die"), n=3)
Pmle(c("live", "and", "i", "would", "die"), n=3)
Pmle(c("live", "and", "i", "would", "die"))
Pmle(c("live", "and", "i", "would", "die"),3)
Pmle(c("live", "and", "i", "would", "die"),4)
Pmle <- function(words, size=2){
sum(sapply(1:(length(words)-size+1),function(x) {
currentGram <- words[x:(x+size-1)]
print(paste(currentGram, collapse = ""))
log(countFreq(currentGram)/countFreq(head(currentGram, n = size-1)))
}))
#countFreq(words)/countFreq(head(words, n = length(words) - 1))
}
Pmle(c("i","would","sleep"))
Pmle <- function(words, size=2){
sum(sapply(1:(length(words)-size+1),function(x) {
currentGram <- words[x:(x+size-1)]
print(sprintf("%s/%s",paste(currentGram, collapse = "_"),paste(head(currentGram, n = size-1), collapse = "_")))
log(countFreq(currentGram)/countFreq(head(currentGram, n = size-1)))
}))
#countFreq(words)/countFreq(head(words, n = length(words) - 1))
}
Pmle(c("i","would","sleep"))
Pmle(c("and","i", "would","sleep"),3)
Pmle <- function(words, size=2){
sum(sapply((length(words)):size,function(x) {
currentGram <- words[x:(x+size-1)]
#print(sprintf("%s/%s",paste(currentGram, collapse = "_"),paste(head(currentGram, n = size-1), collapse = "_")))
log(countFreq(currentGram)/countFreq(head(currentGram, n = size-1)))
}))
#countFreq(words)/countFreq(head(words, n = length(words) - 1))
}
Pmle(c("i","would","sleep"))
Pmle <- function(words, size=2){
sum(sapply((length(words)):size,function(x) {
currentGram <- words[x:(x-size)]
print(sprintf("%s/%s",paste(currentGram, collapse = "_"),paste(head(currentGram, n = size-1), collapse = "_")))
#log(countFreq(currentGram)/countFreq(head(currentGram, n = size-1)))
}))
#countFreq(words)/countFreq(head(words, n = length(words) - 1))
}
Pmle(c("i","would","sleep"))
Pmle <- function(words, size=2){
sum(sapply((length(words)):size,function(x) {
currentGram <- words[(x-size):x]
print(sprintf("%s/%s",paste(currentGram, collapse = "_"),paste(head(currentGram, n = size-1), collapse = "_")))
#log(countFreq(currentGram)/countFreq(head(currentGram, n = size-1)))
}))
#countFreq(words)/countFreq(head(words, n = length(words) - 1))
}
Pmle(c("i","would","sleep"))
Pmle <- function(words, size=2){
sum(sapply((length(words)):size,function(x) {
currentGram <- words[(x-size):x]
print(sprintf("%s/%s",paste(currentGram, collapse = "_"),paste(head(currentGram, n = size), collapse = "_")))
#log(countFreq(currentGram)/countFreq(head(currentGram, n = size-1)))
}))
#countFreq(words)/countFreq(head(words, n = length(words) - 1))
}
Pmle(c("i","would","sleep"))
Pmle <- function(words, size=2){
sum(sapply((length(words)):size,function(x) {
currentGram <- words[(x-size):x]
print(sprintf("%s/%s",paste(currentGram, collapse = "_"),paste(head(currentGram, n = length(currentGram)-1), collapse = "_")))
#log(countFreq(currentGram)/countFreq(head(currentGram, n = size-1)))
}))
#countFreq(words)/countFreq(head(words, n = length(words) - 1))
}
Pmle(c("i","would","sleep"))
Pmle(c("and","i", "would","sleep"),3)
Pmle <- function(words, size=2){
sum(sapply(1:(length(words)-size+1),function(x) {
#currentGram <- words[x:(x+size-1)]
print(sprintf("%s/%s",paste(currentGram, collapse = "_"),paste(head(currentGram, n = size-1), collapse = "_")))
#log(countFreq(currentGram)/countFreq(head(currentGram, n = size-1)))
}))
#countFreq(words)/countFreq(head(words, n = length(words) - 1))
}
Pmle(c("i","would","sleep"))
Pmle <- function(words, size=2){
sum(sapply(1:(length(words)-size+1),function(x) {
#currentGram <- words[x:(x+size-1)]
print(sprintf("%s/%s",paste(currentGram, collapse = "_"),paste(head(currentGram, n = size-1), collapse = "_")))
#log(countFreq(currentGram)/countFreq(head(currentGram, n = size-1)))
}))
#countFreq(words)/countFreq(head(words, n = length(words) - 1))
}
Pmle(c("i","would","sleep"))
Pmle <- function(words, size=2){
sum(sapply(1:(length(words)-size+1),function(x) {
currentGram <- words[x:(x+size-1)]
print(sprintf("%s/%s",paste(currentGram, collapse = "_"),paste(head(currentGram, n = size-1), collapse = "_")))
#log(countFreq(currentGram)/countFreq(head(currentGram, n = size-1)))
}))
#countFreq(words)/countFreq(head(words, n = length(words) - 1))
}
Pmle(c("i","would","sleep"))
Pmle(c("and","i", "would","sleep"),3)
