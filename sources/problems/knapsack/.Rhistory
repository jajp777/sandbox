hist(dates[negative], "month")
str(site0)
both <- intersect(site0,site0)
both <- intersect(site0,site1)
both
head(pm0)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, Country.Code == 63 & Site.ID == 2008)
pm0sub <- subset(pm0, Country.Code == 63 & Site.ID == 2008)
pm0sub <- subset(pm0, County.Code == 63 & Site.ID == 2008)
pm0sub <- subset(cnt0, County.Code == 63 & Site.ID == 2008)
pm1sub <- subset(cnt1, County.Code == 63 & Site.ID == 2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow = c(1,2))
par(mfrow = c(1,2), mar = c(4,4,2,1))
plot(dates0, x0sub, pch = 20)
abline(median(x0sub), na.rm = TRUE)
1q
1
abline*h = median(x0sub, na.rm =  TRUE), lwd = 2
abline*h = median(x0sub, na.rm =  TRUE), lwd = 2)
abline(h = median(x0sub, na.rm =  TRUE), lwd = 2)
plot(dates1, x1sub, pch = 20)
abline(h = median(x1sub, na.rm =  TRUE), lwd = 2)
rng <- range(x0sub,x1sub,na.rm=true)
rng <- range(x0sub,x1sub,na.rm=TRUE)
rng
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state=names(mn0),mean=mn0 )
d1 <- data.frame(state=names(mn1),mean=mn1 )
mrg <- merge(d0,d1,by="state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1,52), mrg[,2],xlim=.5,2.5))
with(mrg, plot(rep(1,52), mrg[,2],xlim=c(.5,2.5)))
with(mrg, points(rep(2,52), mrg[,3]))
segments(rep(1,52),mrg[,2], rep(2,52), mrg[,3])
mrg[mrg@mean.x < mrg$mean.y]
mrg[mrg$mean.x < mrg$mean.y]
mrg[mrg$mean.x < mrg$mean.y]
mrg
mrg[mrg$mean.x < mrg$mean.y,]
c(1,2,3)
lapply(c(1,2,3), max)
lapply(c(1,2,3), sum)
lapply(c(1,2,3), function(){1})
lapply(c(1,2,3), function(x){1})
sapply(c(1,2,3), function(x){1})
lapply(c(1,2,3), function(x){x*2})
sapply(c(1,2,3), function(x){x*2})
l <- list(a = 1:10, b = 11:20)
l
lapply(l, sum)
sapply(l, sum)
r <- sapply(l, sum)
r[0]
r[1]
r[2]
r[[1]]
lr <- lapply(l, sum)
lr[1]
lr[[1]
]
source('C:/github/xunilrj-sandbox/sources/problems/knapsack/complexityanalysis.R')
source('C:/github/xunilrj-sandbox/sources/problems/knapsack/complexityanalysis.R')
with(times, plot(size, Time))
with(times, plot(Size, Time))
source('C:/github/xunilrj-sandbox/sources/problems/knapsack/complexityanalysis.R')
source('C:/github/xunilrj-sandbox/sources/problems/knapsack/complexityanalysis.R')
times <- subset(times, Size = 2048)
with(times, plot(Size, Time))
times <- with(times, subset(times, Size = 2048))
with(times, plot(Size, Time))
times <- subset(times, times$Size = 2048)
with(times, plot(Size, Time))
times <- times[Size = 2048,]
with(times, plot(Size, Time))
times <- read.csv('csharptimes.csv')
times <- times[Size = 2048,]
with(times, plot(Size, Time))
times[Size = 2048,]
times <- times[times$Size = 2048,]
times <- read.csv('csharptimes.csv')
with(times[wich(times$Size = 2048),], plot(Size, Time))
with(times[wich(times$Size == 2048),], plot(Size, Time))
with(times[which(times$Size == 2048),], plot(Size, Time))
with(times[which(times$C == 2048),], plot(Size, Time))
lm(Size ~ Time, data = times2048)
lm(Size ~ Time, data = times2048)
times <- read.csv('csharptimes.csv')
times2048 <- times[which(times$C == 2048),]
with(times2048, plot(Size, Time))
lm(Size ~ Time, data = times2048)
lRResult <- lm(Size ~ Time, data = times2048)
LRResult <- lm(Size ~ Time, data = times2048)
LRResult$coefficients[1]
abline(LRResult$coefficients[1], LRResult$coefficients[2])
abline(LRResult$coefficients[2], LRResult$coefficients[1])
abline(LRResult)
with(times2048, plot(Size, Time))
LRResult <- lm(Size ~ Time, data = times2048)
abline(LRResult)
LRResult <- lm(Time ~Size, data = times2048)
abline(LRResult)
source('C:/github/xunilrj-sandbox/sources/problems/knapsack/complexityanalysis.R')
source('C:/github/xunilrj-sandbox/sources/problems/knapsack/complexityanalysis.R')
summary(LRResult)
rsquared1 <- summary(LRResult)$r.squared
rsquared2 <- cor(times2048$Time ,times2048$Size)^2
?cor
mylabel = bquote(italic(R)^2 == .(format(rsquared2, digits = 3)))
text(x = 19, y = 2.5, labels = mylabel)
text(x = 0, y = 0, labels = mylabel)
source('C:/github/xunilrj-sandbox/sources/problems/knapsack/complexityanalysis.R')
source('C:/github/xunilrj-sandbox/sources/problems/knapsack/complexityanalysis.R')
source('C:/github/xunilrj-sandbox/sources/problems/knapsack/complexityanalysis.R')
source('C:/github/xunilrj-sandbox/sources/problems/knapsack/complexityanalysis.R')
source('C:/github/xunilrj-sandbox/sources/problems/knapsack/complexityanalysis.R')
timesCES <- times[which(times$C == times$Size),]
with(timesCES, plot(Size, Time, main = "When Capacity = Size"))
LRResult <- lm(Time ~ Size, data = timesCES)
abline(LRResult)
usr <- par( "usr" )
rsquaredlabel = bquote(italic(R)^2 == .(format(rsquared2, digits = 3)))
text(usr[ 1 ], usr[ 4 ], labels = rsquaredlabel, adj = c( 0, 1 ))
rsquared2 <- cor(timesCES$Time ,timesCES$Size)^2
usr <- par( "usr" )
rsquaredlabel = bquote(italic(R)^2 == .(format(rsquared2, digits = 3)))
text(usr[ 1 ], usr[ 4 ], labels = rsquaredlabel, adj = c( 0, 1 ))
timesCES <- times[which(times$C == times$Size),]
with(timesCES, plot(Size, Time, main = "When Capacity = Size"))
LRResult <- lm(Time ~ Size, data = timesCES)
abline(LRResult)
rsquared2 <- cor(timesCES$Time ,timesCES$Size)^2
usr <- par( "usr" )
rsquaredlabel = bquote(italic(R)^2 == .(format(rsquared2, digits = 3)))
text(usr[ 1 ], usr[ 4 ], labels = rsquaredlabel, adj = c( 0, 1 ))
ERResult <- lm(log(Time) ~ Size, data = timesCES)
log(timesCES$Time)
log(timesCES$Time + 0.0001)
with(timesCES, plot(Size, log(Time) + 0.001, main = "When Capacity = Size"))
with(timesCES, plot(Size, log(Time), main = "When Capacity = Size"))
with(timesCES, plot(log(Size), log(Time), main = "When Capacity = Size"))
with(timesCES, plot(log(Size), log(Time) + 0.1, main = "When Capacity = Size"))
log(Time)
log(timesCES$Time) + 0.1
with(timesCES, plot(log(Size), log(timesCES$Time + 1), main = "When Capacity = Size"))
with(timesCES, plot(log(Size + 1), log(timesCES$Time + 1), main = "When Capacity = Size"))
ERResult <- lm(log(Time + 1) ~ Size, data = timesCES)
summary(ERResult)
timesCES <- times[which(times$C == times$Size),][2:]
timesCES <- timesCES[2:]
timesCES <- times[which(times$C == times$Size),]
timesCES <- timesCES[-(1:2)]
timesCES <- times[which(times$C == times$Size),]
timesCES <- timesCES[-(1:2),]
with(timesCES, plot(Size, Time, main = "When Capacity = Size"))
LRResult <- lm(Time ~ Size, data = timesCES)
abline(LRResult)
rsquared2 <- cor(timesCES$Time ,timesCES$Size)^2
usr <- par( "usr" )
rsquaredlabel = bquote(italic(R)^2 == .(format(rsquared2, digits = 3)))
text(usr[ 1 ], usr[ 4 ], labels = rsquaredlabel, adj = c( 0, 1 ))
with(timesCES, plot(log(Size + 1), log(timesCES$Time + 1), main = "When Capacity = Size"))
timesCES <- timesCES[-(1:),]
timesCES <- timesCES[-(1:3),]
with(timesCES, plot(log(Size + 1), log(timesCES$Time + 1), main = "When Capacity = Size"))
ERResult <- lm(log(Time + 1) ~ Size, data = timesCES)
summary(ERResult)
ERResult <- lm(log(Size + 1), log(timesCES$Time + 1), data = timesCES)
ERResult <- lm(log(Time + 1) ~ log(Size + 1), data = timesCES)
summary(ERResult)
timesCES <- times[which(times$C == times$Size),]
with(timesCES, plot(Size, Time, main = "When Capacity = Size"))
LRResult <- lm(Time ~ Size, data = timesCES)
abline(LRResult)
rsquared2 <- cor(timesCES$Time ,timesCES$Size)^2
usr <- par( "usr" )
rsquaredlabel = bquote(italic(R)^2 == .(format(rsquared2, digits = 3)))
text(usr[ 1 ], usr[ 4 ], labels = rsquaredlabel, adj = c( 0, 1 ))
with(timesCES, plot(log(Size), log(Time), main = "When Capacity = Size"))
with(timesCES, plot(log(Size), log(Time + 1), main = "When Capacity = Size"))
timesCESAdjusted$Time <- timesCESAdjusted$Time + 1
timesCESAdjusted <- dclone(timesCES)
library(dclone)
install.packages('dclone')
library(dclone)
timesCESAdjusted <- dclone(timesCES)
timesCESAdjusted <- timesCES
timesCESAdjusted$Time <- timesCESAdjusted$Time + 1
View(timesCESAdjusted)
with(timesCES, plot(log(Size), log(Time), main = "When Capacity = Size"))
with(timesCESAdjusted, plot(log(Size), log(Time), main = "When Capacity = Size"))
times
times[,c("C")]
typeof(times[,c("C")])
as.vector(times[,c("C")])
source('C:/github/xunilrj-sandbox/sources/problems/knapsack/complexityanalysis.R')
drawLinearModel(times2048, Time, Size)
drawLinearModel <- function(dataFrame, var1, var2){
ys <- deparse(substitute(y))
xs <- deparse(substitute(x))
LRResult <- lm(var1 ~ var2, data = dataFrame)
abline(LRResult)
#rsquared1 <- summary(LRResult)$r.squared
#rsquared2 <- cor(dataFrame[,c(var1)], dataFrame[,c(var2)])^2
#usr <- par( "usr" )
#rsquaredlabel = bquote(italic(R)^2 == .(format(rsquared2, digits = 3)))
#text(usr[ 1 ], usr[ 4 ], labels = rsquaredlabel, adj = c( 0, 1 ))
}
drawLinearModel(times2048, Time, Size)
drawLinearModel <- function(dataFrame, var1, var2){
arguments <- as.list(match.call())
ys <- deparse(substitute(y))
xs <- deparse(substitute(x))
LRResult <- lm(var1 ~ var2, data = dataFrame)
abline(LRResult)
#rsquared1 <- summary(LRResult)$r.squared
#rsquared2 <- cor(dataFrame[,c(var1)], dataFrame[,c(var2)])^2
#usr <- par( "usr" )
#rsquaredlabel = bquote(italic(R)^2 == .(format(rsquared2, digits = 3)))
#text(usr[ 1 ], usr[ 4 ], labels = rsquaredlabel, adj = c( 0, 1 ))
}
drawLinearModel(times2048, Time, Size)
drawLinearModel <- function(dataFrame, var1, var2){
arguments <- as.list(match.call())
evaluatedVar1 <- eval(arguments$var1, dataFrame)
evaluatedVar2 <- eval(arguments$var2, dataFrame)
LRResult <- lm(evaluatedVar1 ~ evaluatedVar2, data = dataFrame)
abline(LRResult)
#rsquared1 <- summary(LRResult)$r.squared
#rsquared2 <- cor(dataFrame[,c(var1)], dataFrame[,c(var2)])^2
#usr <- par( "usr" )
#rsquaredlabel = bquote(italic(R)^2 == .(format(rsquared2, digits = 3)))
#text(usr[ 1 ], usr[ 4 ], labels = rsquaredlabel, adj = c( 0, 1 ))
}
drawLinearModel(times2048, Time, Size)
times2048$Time ~ times2048$Size
formula(times2048$Time ~ times2048$Size)
toString(formula(times2048$Time ~ times2048$Size))
toString(formula(times2048$Time ~ times2048$Size))[1]
toString(formula(times2048$Time ~ times2048$Size))[[1]]
toString(formula(times2048$Time ~ times2048$Size))[[2]]
all.vars(times2048$Time ~ times2048$Size)
drawLinearModel <- function(dataFrame, formula){
all.vars(formula)
arguments <- as.list(match.call())
evaluatedVar1 <- eval(arguments$var1, dataFrame)
evaluatedVar2 <- eval(arguments$var2, dataFrame)
LRResult <- lm(evaluatedVar1 ~ evaluatedVar2, data = dataFrame)
abline(LRResult)
#rsquared1 <- summary(LRResult)$r.squared
#rsquared2 <- cor(dataFrame[,c(var1)], dataFrame[,c(var2)])^2
#usr <- par( "usr" )
#rsquaredlabel = bquote(italic(R)^2 == .(format(rsquared2, digits = 3)))
#text(usr[ 1 ], usr[ 4 ], labels = rsquaredlabel, adj = c( 0, 1 ))
}
drawLinearModel(times2048, Time, Size)
drawLinearModel(times2048, Time ~ Size)
drawLinearModel <- function(dataFrame, formula){
all.vars(formula)
#arguments <- as.list(match.call())
#evaluatedVar1 <- eval(arguments$var1, dataFrame)
#evaluatedVar2 <- eval(arguments$var2, dataFrame)
#LRResult <- lm(evaluatedVar1 ~ evaluatedVar2, data = dataFrame)
#abline(LRResult)
#rsquared1 <- summary(LRResult)$r.squared
#rsquared2 <- cor(dataFrame[,c(var1)], dataFrame[,c(var2)])^2
#usr <- par( "usr" )
#rsquaredlabel = bquote(italic(R)^2 == .(format(rsquared2, digits = 3)))
#text(usr[ 1 ], usr[ 4 ], labels = rsquaredlabel, adj = c( 0, 1 ))
}
drawLinearModel(times2048, Time ~ Size)
drawLinearModel <- function(dataFrame, formula){
vars <- all.vars(formula)
#arguments <- as.list(match.call())
evaluatedVar1 <- dataFrame[,c(vars[1])]
evaluatedVar2 <- dataFrame[,c(vars[2])]
#LRResult <- lm(evaluatedVar1 ~ evaluatedVar2, data = dataFrame)
#abline(LRResult)
#rsquared1 <- summary(LRResult)$r.squared
#rsquared2 <- cor(dataFrame[,c(var1)], dataFrame[,c(var2)])^2
#usr <- par( "usr" )
#rsquaredlabel = bquote(italic(R)^2 == .(format(rsquared2, digits = 3)))
#text(usr[ 1 ], usr[ 4 ], labels = rsquaredlabel, adj = c( 0, 1 ))
}
drawLinearModel(times2048, Time ~ Size)
drawLinearModel <- function(dataFrame, formula){
vars <- all.vars(formula)
#arguments <- as.list(match.call())
evaluatedVar1 <- dataFrame[,c(vars[1])]
evaluatedVar2 <- dataFrame[,c(vars[2])]
lmResult <- lm(evaluatedVar1 ~ evaluatedVar2, data = dataFrame)
abline(lmResult)
#rsquared1 <- summary(LRResult)$r.squared
rsquared2 <- cor(evaluatedVar1, evaluatedVar2)^2
usr <- par( "usr" )
rsquaredlabel = bquote(italic(R)^2 == .(format(rsquared2, digits = 3)))
text(usr[ 1 ], usr[ 4 ], labels = rsquaredlabel, adj = c( 0, 1 ))
}
drawLinearModel(times2048, Time ~ Size)
times2048 <- times[which(times$C == 2048),]
with(times2048, plot(Size, Time, main = "When Capacity = 2048"))
dev.off()
times2048 <- times[which(times$C == 2048),]
with(times2048, plot(Size, Time, main = "When Capacity = 2048"))
drawLinearModel(times2048, Time ~ Size)
timesCES <- times[which(times$C == times$Size),]
with(timesCES, plot(Size, Time, main = "When Capacity = Size"))
drawLinearModel(timesCES, Time ~ Size)
with(timesCES, plot(log(Size), log(Time), main = "When Capacity = Size"))
drawLinearModel(timesCES, log(Time) ~ log(Size))
drawLinearModel(timesCES, log(Time+1) ~ log(Size))
all.vars(A ~ B)
all.vars(log(A) ~ B)
all.vars(log(A+1) ~ B)
all.names(A ~B)
all.names(log(A+1) ~ B)
drawLinearModel <- function(dataFrame, formula){
#vars <- all.vars(formula)
arguments <- as.list(match.call())
evaluatedFormula = eval(arguments$formula, dataFrame)
#evaluatedVar1 <- dataFrame[,c(vars[1])]
#evaluatedVar2 <- dataFrame[,c(vars[2])]
lmResult <- lm(evaluatedFormula, data = dataFrame)
abline(lmResult)
#rsquared1 <- summary(LRResult)$r.squared
rsquared2 <- cor(evaluatedVar1, evaluatedVar2)^2
usr <- par( "usr" )
rsquaredlabel = bquote(italic(R)^2 == .(format(rsquared2, digits = 3)))
text(usr[ 1 ], usr[ 4 ], labels = rsquaredlabel, adj = c( 0, 1 ))
}
times2048 <- times[which(times$C == 2048),]
with(times2048, plot(Size, Time, main = "When Capacity = 2048"))
drawLinearModel(times2048, Time ~ Size)
drawLinearModel <- function(dataFrame, formula){
arguments <- as.list(match.call())
evaluatedFormula = eval(arguments$formula, dataFrame)
vars <- all.vars(formula)
evaluatedVar1 <- dataFrame[,c(vars[1])]
evaluatedVar2 <- dataFrame[,c(vars[2])]
lmResult <- lm(evaluatedFormula, data = dataFrame)
abline(lmResult)
#rsquared1 <- summary(LRResult)$r.squared
rsquared2 <- cor(evaluatedVar1, evaluatedVar2)^2
usr <- par( "usr" )
rsquaredlabel = bquote(italic(R)^2 == .(format(rsquared2, digits = 3)))
text(usr[ 1 ], usr[ 4 ], labels = rsquaredlabel, adj = c( 0, 1 ))
}
drawLinearModel(times2048, Time ~ Size)
times2048 <- times[which(times$C == 2048),]
with(times2048, plot(Size, Time, main = "When Capacity = 2048"))
drawLinearModel(times2048, Time ~ Size)
timesCES <- times[which(times$C == times$Size),]
with(timesCES, plot(Size, Time, main = "When Capacity = Size"))
drawLinearModel(timesCES, Time ~ Size)
with(timesCES, plot(log(Size), log(Time), main = "When Capacity = Size"))
drawLinearModel(timesCES, log(Time) ~ log(Size))
drawLinearModel(timesCES, log(Time+1) ~ log(Size))
timesCESAdjusted <- timesCES
timesCESAdjusted$Time <- timesCESAdjusted$Time + 1
with(timesCESAdjusted, plot(log(Size), log(Time), main = "When Capacity = Size"))
drawLinearModel(timesCESAdjusted, log(Time) ~ log(Size))
timesCESAdjustedSkipped <- timesCESAdjusted
timesCESAdjustedSkipped <- timesCESAdjustedSkipped[-(1:3),]
with(timesCESAdjustedSkipped, plot(Size, Time, main = "When Capacity = Size"))
drawLinearModel(timesCESAdjusted, log(Time) ~ log(Size))
with(timesCESAdjustedSkipped, plot(Size, Time, main = "When Capacity = Size"))
drawLinearModel(timesCESAdjustedSkipped, log(Time) ~ log(Size))
timesCESAdjustedSkipped <- timesCESAdjusted
timesCESAdjustedSkipped <- timesCESAdjustedSkipped[-(1:3),]
with(timesCESAdjustedSkipped, plot(log(Size), log(Time), main = "When Capacity = Size"))
drawLinearModel(timesCESAdjustedSkipped, log(Time) ~ log(Size))
with(timesCES, plot(log(Size), log(Time), main = "When Capacity = Size"))
drawLinearModel(timesCES, log(Time) ~ log(Size)) #throw because Time has zeros
timesCESAdjusted <- timesCES
timesCESAdjusted$Time <- timesCESAdjusted$Time + 1
with(timesCESAdjusted, plot(log(Size), log(Time), main = "When Capacity = Size"))
drawLinearModel(timesCESAdjusted, log(Time) ~ log(Size))
timesCESAdjustedSkipped <- timesCESAdjusted
timesCESAdjustedSkipped <- timesCESAdjustedSkipped[-(1:3),]
with(timesCESAdjustedSkipped, plot(log(Size), log(Time), main = "When Capacity = Size"))
drawLinearModel(timesCESAdjustedSkipped, log(Time) ~ log(Size))
timesCESAdjustedSkipped <- timesCESAdjusted
timesCESAdjustedSkipped <- timesCESAdjustedSkipped[-(1:4),]
with(timesCESAdjustedSkipped, plot(log(Size), log(Time), main = "When Capacity = Size"))
drawLinearModel(timesCESAdjustedSkipped, log(Time) ~ log(Size))
timesCESAdjustedSkipped <- timesCESAdjusted
timesCESAdjustedSkipped <- timesCESAdjustedSkipped[-(0:4),]
with(timesCESAdjustedSkipped, plot(log(Size), log(Time), main = "When Capacity = Size"))
drawLinearModel(timesCESAdjustedSkipped, log(Time) ~ log(Size))
timesCESAdjustedSkipped <- timesCESAdjusted
timesCESAdjustedSkipped <- timesCESAdjustedSkipped[-(0:5),]
with(timesCESAdjustedSkipped, plot(log(Size), log(Time), main = "When Capacity = Size"))
drawLinearModel(timesCESAdjustedSkipped, log(Time) ~ log(Size))
timesCES <- times[which(times$C == times$Size),]
with(timesCES, plot(Size, Time, main = "When Capacity = Size"))
drawLinearModel(timesCES, Time ~ Size)
timesCESAdjustedSkipped <- timesCESAdjusted
timesCESAdjustedSkipped <- timesCESAdjustedSkipped[-(0:3),]
with(timesCESAdjustedSkipped, plot(log(Size), log(Time), main = "When Capacity = Size"))
drawLinearModel(timesCESAdjustedSkipped, log(Time) ~ log(Size))
View(timesCESAdjustedSkipped)
timesCESAdjustedSkipped <- timesCESAdjusted
timesCESAdjustedSkipped <- timesCESAdjustedSkipped[-(0:5),]
with(timesCESAdjustedSkipped, plot(log(Size), log(Time), main = "When Capacity = Size"))
drawLinearModel(timesCESAdjustedSkipped, log(Time) ~ log(Size))
View(timesCESAdjustedSkipped)
source('C:/github/xunilrj-sandbox/sources/problems/knapsack/complexityanalysis.R')
source('C:/github/xunilrj-sandbox/sources/problems/knapsack/complexityanalysis.R')
source('C:/github/xunilrj-sandbox/sources/problems/knapsack/complexityanalysis.R')
times2048 <- times[which(times$C == 2048),]
with(times2048, plot(Size, Time, main = "When Capacity = 2048"))
drawLinearModel(times2048, Time ~ Size)
timesCES <- times[which(times$C == times$Size),]
with(timesCES, plot(Size, Time, main = "When Capacity = Size"))
drawLinearModel(timesCES, Time ~ Size)
with(timesCES, plot(Size*C, Time, main = "When Capacity = Size"))
times2048 <- times[which(times$C == 2048),]
with(times2048, plot(Size*C, Time, main = "When Capacity = 2048"))
drawLinearModel(times2048, Time ~ Size)
with(times2048, plot(Size*C, Time, main = "When Capacity = 2048"))
drawLinearModel(times2048, Time ~ Size*C)
with(times2048, plot(log(Size*C), Time, main = "When Capacity = 2048"))
with(times2048, plot(Size, Time, main = "When Capacity = 2048"))
with(times2048, plot(Size*2048, Time, main = "When Capacity = 2048"))
with(times2048, plot(Size*C, Time, main = "When Capacity = 2048"))
with(timesCES, plot(Size*C, Time, main = "When Capacity = Size"))
View(timesCES)
View(times)
View(times2048)
with(timesCES, plot(log(Size*C), Time, main = "When Capacity = Size"))
with(times2048, plot(log(Size*C), Time, main = "When Capacity = 2048"))
with(times2048, plot(Size*C/1000, Time/1000, main = "When Capacity = 2048"))
with(times2048, plot(Size*C/10000, Time/10000, main = "When Capacity = 2048"))
with(timesCES, plot(log(Size*C/10000, Time/10000, main = "When Capacity = Size"))
with(timesCES, plot(Size*C/10000, Time/10000, main = "When Capacity = Size"))
with(timesCES, plot(Size*C/10000, Time/10000, main = "When Capacity = Size"))
drawLinearModel(timesCES, Time ~ Size)
drawLinearModel(timesCES, Time ~ (Size*C/10000)
drawLinearModel(timesCES, Time ~ (Size*C/10000))
drawLinearModel(timesCES, Time ~ (Size*C/10000))
timesCES$SizeC <- timesCES$C * timesCES$Size * 0.00001
with(timesCES, plot(SizeC, Time, main = "When Capacity = Size"))
drawLinearModel(timesCES, Time ~ SizeC))
drawLinearModel(timesCES, Time ~ SizeC)
timesCES$Time <- timesCES$Time * 0.00001
timesCES$SizeC <- timesCES$C * timesCES$Size * 0.00001
with(timesCES, plot(SizeC, Time, main = "When Capacity = Size"))
drawLinearModel(timesCES, Time ~ SizeC)
timesCES <- times[which(times$C == times$Size),]
#timesCES$Time <- timesCES$Time * 0.00001
#timesCES$SizeC <- timesCES$C * timesCES$Size * 0.00001
timesCES$SizeC <- timesCES$C * timesCES$Size
with(timesCES, plot(SizeC, Time, main = "When Capacity = Size"))
drawLinearModel(timesCES, Time ~ SizeC)
times <- read.csv('csharptimes.csv')
View(times)
times2048 <- times[which(times$C == 1024),]
with(times2048, plot(Size, Time/1000, main = "When Capacity = 2048"))
timesBig <- times[which(times$C == 1024),]
timesBig$Time <- timesBig$Time / 1000
timesBig <- times[which(times$C == 1024),]
timesBig$Time <- timesBig$Time / 1000
with(timesBig, plot(Size, Time, main = "When Capacity = 2048"))
drawLinearModel(timesBig, Time ~ Size)
str(1024)
toString(1024)
"a" + "b"
cat("a", "b")
times <- read.csv('csharptimes.csv')
size <- 2014
timesBig <- times[which(times$C == size),]
timesBig$Time <- timesBig$Time / 1000
with(timesBig, plot(Size, Time, main = cat("When Capacity = ", toString(size))))
timesConstantCapacity <- times[which(times$C == size),]
timesConstantCapacity$Time <- timesBig$Time / 1000
with(timesConstantCapacity, plot(Size, Time, main = cat("When Capacity = ", toString(size))))
View(timesConstantCapacity)
size <- 1024
timesConstantCapacity <- times[which(times$C == size),]
timesConstantCapacity$Time <- timesBig$Time / 1000
with(timesConstantCapacity, plot(Size, Time, main = cat("When Capacity = ", toString(size))))
View(timesConstantCapacity)
timesConstantCapacity <- times[which(times$C == size),]
timesConstantCapacity$Time <- timesConstantCapacity$Time / 1000
with(timesConstantCapacity, plot(Size, Time, main = cat("When Capacity = ", toString(size))))
drawLinearModel(timesConstantCapacity, Time ~ Size)
size <- 47434
timesConstantSize <- times[which(times$Size == size),]
#timesCES$Time <- timesCES$Time * 0.00001
#timesCES$SizeC <- timesCES$C * timesCES$Size * 0.00001
size <- 47434
timesConstantSize <- times[which(times$Size == size),]
with(timesCES, plot(C, Time, main = cat("When Size =", toString(size))))
drawLinearModel(timesCES, Time ~ SizeC)
drawLinearModel(timesCES, Time ~ C)
size <- 47434
timesConstantSize <- times[which(times$Size == size),]
with(timesCES, plot(C, Time, main = cat("When Size =", toString(size))))
drawLinearModel(timesCES, Time ~ C)
