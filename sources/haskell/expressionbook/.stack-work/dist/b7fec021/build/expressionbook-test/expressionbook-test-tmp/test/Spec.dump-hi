
==================== FINAL INTERFACE ====================
2017-01-04 19:48:10.6990708 UTC

interface main@main:Main 8001
  interface hash: c2807fa2410010b98f9951352b98f7a7
  ABI hash: 309ad96a00493ac824d3343e771d1a31
  export-list hash: a6f768a9bcb5fe8ee19467d70d2c6a5c
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 77c13ea9688b6ecb9a1046b3521b5618
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: HUnit-1.3.1.2@HUnit-1.3.1.2-LggooYwT1UPHSoNYWvAdgk
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0*
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      expressionbook-0.1.0.0@expressionbook-0.1.0.0-LlBwiZN2GcABqwDhckJdFj
                      ghc-prim-0.5.0.0 integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
import  -/  HUnit-1.3.1.2@HUnit-1.3.1.2-LggooYwT1UPHSoNYWvAdgk:Test.HUnit dedf8672d65dfb10ce8a7e3bc8c64de6
import  -/  HUnit-1.3.1.2@HUnit-1.3.1.2-LggooYwT1UPHSoNYWvAdgk:Test.HUnit.Base ede56fd528e19c0ad00ee2cc864d7387
import  -/  HUnit-1.3.1.2@HUnit-1.3.1.2-LggooYwT1UPHSoNYWvAdgk:Test.HUnit.Text bd70ee9b70999dfb16b664cd895a4db6
import  -/  base-4.9.0.0:Prelude 2d9cd8b0ec3d728f62b734df888d2e34
import  -/  expressionbook-0.1.0.0@expressionbook-0.1.0.0-LlBwiZN2GcABqwDhckJdFj:Chapter01 41d48812351173aa17af635ae5cd25b0
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
4fa5e55f771f44c271a4c437452e7de7
  main :: GHC.Types.IO Test.HUnit.Base.Counts
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <Test.HUnit.Base.Counts>_R)) -}
067501cad21ee08175695e6505cc2fb4
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Test.HUnit.Base.Counts #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Test.HUnit.Text.runTestTT3 of ww { Test.HUnit.Text.PutText ww1 ww2 ->
                 case Test.HUnit.Text.$wrunTestText
                        @ GHC.Types.Int
                        ww1
                        ww2
                        Main.main2
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) counts' ds ->
                 case ds of wild1 { GHC.Types.I# ds2 ->
                 case ds2 of ds3 {
                   DEFAULT
                   -> GHC.IO.failIO1
                        @ Test.HUnit.Base.Counts
                        Test.HUnit.Text.runTestTT2
                        ipv
                   0# -> (# ipv, counts' #) } } } } }) -}
7f35e1372de3a128368372b0e13bd385
  main10 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main18
                   Main.main11
                   GHC.Stack.Types.EmptyCallStack) -}
e7118520ab6da99ebc15144fd36aea9e
  main11 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main17
                   Main.main16
                   Main.main15
                   Main.main14
                   Main.main13
                   Main.main14
                   Main.main12) -}
2218692267a43772192ec084638b7377
  main12 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 78#) -}
71dcb3ce8e4e041ac9d1a51966fa9be8
  main13 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 16#) -}
b190587d725def016f92e11724fcd9b6
  main14 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 11#) -}
9f90b5e635ea2f27f08248bbe87bbc7f
  main15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "test\\Spec.hs"#) -}
12fc65fd72853b217b0bf33588046dad
  main16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Main"#) -}
1ed210694ebcb8849f1e791df89451aa
  main17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "main"#) -}
490e301ee87995822a72cabc0f58fae4
  main18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "assertEqual"#) -}
f12dcdaea5ea836cb11817a8d0c1c034
  main19 :: Test.HUnit.Base.Test
  {- Unfolding: (Test.HUnit.Base.TestCase
                   Main.main20 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
412d68e90a483a65ca124a5bdcfc2d37
  main2 :: Test.HUnit.Base.Test
  {- Unfolding: (Test.HUnit.Base.TestList Main.main3) -}
02d4e0bc5d324036d8328916c22b7d36
  main20 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (Test.HUnit.Base.@=?7
                   @ GHC.Integer.Type.Integer
                   Main.main22
                     `cast`
                   (Sym (GHC.Classes.N:IP[0] <"loc">_N <GHC.Stack.Types.CallStack>_N))
                   GHC.Integer.Type.$fEqInteger
                   GHC.Show.$fShowInteger
                   Main.main21
                   Main.main8
                   Main.main8) -}
00995862eafc5d23902afc33478bf205
  main21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Should return Nothing for empty list"#) -}
77360ae64a0f3b0cdf5d3c05996ef9e4
  main22 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main18
                   Main.main23
                   GHC.Stack.Types.EmptyCallStack) -}
7d14d10f1db986451ecc3cadf33611ae
  main23 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main17
                   Main.main16
                   Main.main15
                   Main.main25
                   Main.main13
                   Main.main25
                   Main.main24) -}
b0d785a2b4918decc297e2b9ed0767f5
  main24 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 70#) -}
b1f4a0e4b7275d21601085f295f66e60
  main25 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 7#) -}
f37404ecf8841245d40b407c6eac568f
  main26 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Test.HUnit.Base.Counts #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ Test.HUnit.Base.Counts
                   Main.main1
                     `cast`
                   (Sym (GHC.Types.N:IO[0] <Test.HUnit.Base.Counts>_R))) -}
43ac890b78b2330418482d4e61dcc2b2
  main3 :: [Test.HUnit.Base.Test]
  {- Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.main19
                   Main.main4) -}
c29884bcae9902d0673ea776602cbf79
  main4 :: [Test.HUnit.Base.Test]
  {- Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.main5
                   (GHC.Types.[] @ Test.HUnit.Base.Test)) -}
d6984404a089de4b166f312022a49da7
  main5 :: Test.HUnit.Base.Test
  {- Unfolding: (Test.HUnit.Base.TestCase
                   Main.main6 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
8c2667eff0172401199238ad8c9d7065
  main6 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (Test.HUnit.Base.@=?7
                   @ GHC.Integer.Type.Integer
                   Main.main10
                     `cast`
                   (Sym (GHC.Classes.N:IP[0] <"loc">_N <GHC.Stack.Types.CallStack>_N))
                   GHC.Integer.Type.$fEqInteger
                   GHC.Show.$fShowInteger
                   Main.main9
                   Main.main8
                   Main.main7) -}
fd49101bec07badc755751740829ed18
  main7 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
75c5b2da2184731b6cb32384205985bd
  main8 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
e075cdf6b1730db4631fe0b4b700bbf4
  main9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Should return (Just head) for non empty list"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

