a <- "daniel"
b <- "ni"
a %in% b
b %in% a
"nie" %in% "daniel"
"nie" %in% c("daniel")
"nie" %in% c("daniel", "nie")
c("nie") %in% c("daniel", "nie")
r <- c("nie") %in% c("daniel", "nie")
str(r)
r <- c("nie", "daniel") %in% c("daniel", "nie")
str(r)
install.packages("swirl")
library(swirl)
install.packages("swirl")
version
install.packages("swirl", type="win.binary")
library(swirl)
swirl()
install.packages("fields")
install.packages("fields", type = "win.binary")
swirl()
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames,"|", T)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
is.na(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0,x1)
boxplot(log10(x0),log10(x1))
negative <- x1 < 0
sum(negative, na.rm = T)
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Data(as.character(dates), "%Y%m%d")
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negatives], "month")
negatives
hist(dates[negative], "month")
str(site0)
both <- intersect(site0,site0)
both <- intersect(site0,site1)
both
head(pm0)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, Country.Code == 63 & Site.ID == 2008)
pm0sub <- subset(pm0, Country.Code == 63 & Site.ID == 2008)
pm0sub <- subset(pm0, County.Code == 63 & Site.ID == 2008)
pm0sub <- subset(cnt0, County.Code == 63 & Site.ID == 2008)
pm1sub <- subset(cnt1, County.Code == 63 & Site.ID == 2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow = c(1,2))
par(mfrow = c(1,2), mar = c(4,4,2,1))
plot(dates0, x0sub, pch = 20)
abline(median(x0sub), na.rm = TRUE)
1q
1
abline*h = median(x0sub, na.rm =  TRUE), lwd = 2
abline*h = median(x0sub, na.rm =  TRUE), lwd = 2)
abline(h = median(x0sub, na.rm =  TRUE), lwd = 2)
plot(dates1, x1sub, pch = 20)
abline(h = median(x1sub, na.rm =  TRUE), lwd = 2)
rng <- range(x0sub,x1sub,na.rm=true)
rng <- range(x0sub,x1sub,na.rm=TRUE)
rng
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state=names(mn0),mean=mn0 )
d1 <- data.frame(state=names(mn1),mean=mn1 )
mrg <- merge(d0,d1,by="state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1,52), mrg[,2],xlim=.5,2.5))
with(mrg, plot(rep(1,52), mrg[,2],xlim=c(.5,2.5)))
with(mrg, points(rep(2,52), mrg[,3]))
segments(rep(1,52),mrg[,2], rep(2,52), mrg[,3])
mrg[mrg@mean.x < mrg$mean.y]
mrg[mrg$mean.x < mrg$mean.y]
mrg[mrg$mean.x < mrg$mean.y]
mrg
mrg[mrg$mean.x < mrg$mean.y,]
c(1,2,3)
lapply(c(1,2,3), max)
lapply(c(1,2,3), sum)
lapply(c(1,2,3), function(){1})
lapply(c(1,2,3), function(x){1})
sapply(c(1,2,3), function(x){1})
lapply(c(1,2,3), function(x){x*2})
sapply(c(1,2,3), function(x){x*2})
l <- list(a = 1:10, b = 11:20)
l
lapply(l, sum)
sapply(l, sum)
r <- sapply(l, sum)
r[0]
r[1]
r[2]
r[[1]]
lr <- lapply(l, sum)
lr[1]
lr[[1]
]
getPackages <- function(x) {
x <- as.character(match.call()[[2]])
writeLines(sprintf('Testing %s is installed...', x))
if (!require(x, character.only = TRUE)) {
writeLines(sprintf('\tInstalling...', x))
install.packages(pkgs = x, repos = "http://cran.r-project.org")
require(x, character.only = TRUE)
writeLines(sprintf('\tInstalled!', x))
}
}
getPackages('ggplot2')
auto.price <- read.csv('C:\Users\xunil\Downloads\DAT203.1x\Mod4', header = TRUE, stringsAsFactors = FALSE)
auto.price <- read.csv('C:/Users/xunil/Downloads/DAT203.1x/Mod4/Automobile price data _Raw_.csv', header = TRUE, stringsAsFactors = FALSE)
cols <- c('price', 'bore', 'stroke','horsepower', 'peak.rpm')
auto.price[, cols] <- lapply(auto.price[, cols], as.numeric)
cols
auto.price[, cols]
lapply(auto.price[, cols], as.numeric)
auto.price[, cols] <- lapply(auto.price[, cols], as.numeric)
complete.cases(auto.price)
auto.price <- auto.price[complete.cases(auto.price), ]
auto.price$lnprice <- log(auto.price$price)
auto.price$num.of.cylinders
auto.price$num.of.cylinders %in% c("four", "three"), "threefour",
ifelse(auto.price$num.of.cylinders %in% c("five", "six"),
"five-six", "eight-twelve")
auto.price$num.cylinders <-
ifelse(auto.price$num.of.cylinders %in% c("four", "three"), "threefour",
ifelse(auto.price$num.of.cylinders %in% c("five", "six"),
"five-six", "eight-twelve"))
num.cols <- c("wheel.base",
"width",
"height",
"curb.weight",
"engine.size",
"bore",
"compression.ratio",
"city.mpg",
"price",
"lnprice")
pairs(~ ., data = auto.price[, num.cols])
auto.hist <- function(data, x) {
library(ggplot2)
library(gridExtra)
rg = range(auto.price[,x])
bw = (rg[2] - rg[1])/30
title <- paste("Histogram of", x, "conditioned on type of drive wheels")
ggplot(data, aes_string(x)) +
geom_histogram(aes(y = ..count..), binwidth = bw) +
facet_grid(. ~ drive.wheels) +
ggtitle(title)
}
plot.cols2[0]
plot.cols2 <- c("length","curb.weight","engine.size","city.mpg","price")
plot.cols2[1]
auto.hist(auto.price, plot.cols2[1])
auto.hist <- function(data, x) {
getPackages('ggplot2', 'gridExtra')
rg = range(auto.price[,x])
bw = (rg[2] - rg[1])/30
title <- paste("Histogram of", x, "conditioned on type of drive wheels")
ggplot(data, aes_string(x)) +
geom_histogram(aes(y = ..count..), binwidth = bw) +
facet_grid(. ~ drive.wheels) +
ggtitle(title)
}
auto.hist(auto.price, plot.cols2[1])
auto.hist <- function(data, x) {
getPackages(c('ggplot2', 'gridExtra'))
rg = range(auto.price[,x])
bw = (rg[2] - rg[1])/30
title <- paste("Histogram of", x, "conditioned on type of drive wheels")
ggplot(data, aes_string(x)) +
geom_histogram(aes(y = ..count..), binwidth = bw) +
facet_grid(. ~ drive.wheels) +
ggtitle(title)
}
auto.hist(auto.price, plot.cols2[1])
getPackages(c('ggplot2', 'gridExtra'))
install.packages(pkgs = x, repos = "http://cran.r-project.org")
getPackages(ggplot2, gridExtra)
getPackages(c(ggplot2, gridExtra)
getPackages <- function(x) {
x <- as.character(match.call()[[2]])
writeLines(sprintf('Testing %s is installed...', x))
if (!require(x, character.only = TRUE)) {
writeLines(sprintf('\tInstalling...', x))
install.packages(pkgs = x, repos = "http://cran.r-project.org")
require(x, character.only = TRUE)
writeLines(sprintf('\tInstalled!', x))
}
}
getPackages <- function(x) {
x <- as.character(match.call()[[2]])
writeLines(sprintf('Testing %s is installed...', x))
if (!require(x, character.only = TRUE)) {
writeLines(sprintf('\tInstalling...', x))
install.packages(pkgs = x, repos = "http://cran.r-project.org")
require(x, character.only = TRUE)
writeLines(sprintf('\tInstalled!', x))
}
}
getPackages('ggplot2')
getPackages('gridExtra')
auto.price <- read.csv('C:/Users/xunil/Downloads/DAT203.1x/Mod4/Automobile price data _Raw_.csv', header = TRUE, stringsAsFactors = FALSE)
cols <- c('price', 'bore', 'stroke','horsepower', 'peak.rpm')
auto.price[, cols] <- lapply(auto.price[, cols], as.numeric)
auto.price <- auto.price[complete.cases(auto.price), ]
auto.price$lnprice <- log(auto.price$price)
auto.price$num.cylinders <-
ifelse(auto.price$num.of.cylinders %in% c("four", "three"), "threefour",
ifelse(auto.price$num.of.cylinders %in% c("five", "six"),
"five-six", "eight-twelve"))
num.cols <- c("wheel.base",
"width",
"height",
"curb.weight",
"engine.size",
"bore",
"compression.ratio",
"city.mpg",
"price",
"lnprice")
pairs(~ ., data = auto.price[, num.cols])
plot.cols2 <- c("length","curb.weight","engine.size","city.mpg","price")
auto.hist <- function(data, x) {
rg = range(auto.price[,x])
bw = (rg[2] - rg[1])/30
title <- paste("Histogram of", x, "conditioned on type of drive wheels")
ggplot(data, aes_string(x)) +
geom_histogram(aes(y = ..count..), binwidth = bw) +
facet_grid(. ~ drive.wheels) +
ggtitle(title)
}
auto.hist(auto.price, plot.cols2[1])
auto.hist <- function(data, x) {
rg = range(data[,x])
bw = (rg[2] - rg[1])/30
title <- paste("Histogram of", x, "conditioned on type of drive wheels")
ggplot(data, aes_string(x)) +
geom_histogram(aes(y = ..count..), binwidth = bw) +
facet_grid(. ~ drive.wheels) +
ggtitle(title)
}
auto.hist(auto.price, plot.cols2[1])
getPackages('dplyr')
lapply(plot.cols2, pryr::partial(auto.hist, data = auto.price))
getPackages('pryr')
lapply(plot.cols2, pryr::partial(auto.hist, data = auto.price))
auto.box <- function(data, x) {
title <- paste("Box plot of", x, "by type of drive wheels")
ggplot(auto.price, aes_string('drive.wheels', x)) +
geom_boxplot() +
ggtitle(title)
}
lapply(plot.cols2, pryr::partial(auto.box, data = auto.price))
plot.cols3 <- c("length","curb.weight","engine.size","city.mpg")
scatter.auto <- function(data, x){
require(ggplot2)
title <- paste("price vs.", x, 'with color by num.cylinders')
ggplot(data, aes_string(x, 'price')) +
geom_point(aes(color = factor(num.cylinders))) +
ggtitle(title)
}
lapply(plot.cols3, pryr::partial(scatter.auto, data = auto.price))
scatter.auto.cond <- function(data, x){
title <- paste("price vs.", x, 'with color by num.cylinders and body style')
ggplot(data, aes_string(x, 'price')) +
geom_point(aes(color = factor(fuel.type))) +
facet_grid(body.style ~ num.cylinders) +
ggtitle(title)
}
lapply(plot.cols3, pryr::partial(scatter.auto.cond, data = auto.price))
Income <- read.csv('C:/Users/xunil/Downloads/DAT203.1x/Mod4/Adult Census Income Binary Classification dataset.csv')
name.list <- function(x) {
names <- names(x)
len <- length(names)
names[-len]
}
name.list(Income)
names(Income)
feature.names <- name.list(Income)
feature.names <- name.list(Income)
lapply(feature.names, pryr::partial(bar.income, data = Income))
bar.income <- function(data, x){
if(!is.numeric(data[,x])) {
capture.output(
plot( ggplot(data, aes_string(x)) +
geom_bar() +
facet_grid(. ~ income) +
ggtitle(paste("Counts of income level by",x))))
}
}
lapply(feature.names, pryr::partial(bar.income, data = Income))
lapply(feature.names, pryr::partial(box.income, data = Income))
box.income <- function(data, x){
if(is.numeric(data[,x])) {
capture.output(
plot( ggplot(data, aes_string('income', x)) +
geom_boxplot() +
ggtitle(paste("Counts of income level by",x))))
}}
lapply(feature.names, pryr::partial(box.income, data = Income))
ggplot(auto.price)
ggplot(auto.price, aes(x = engine.size))
ggplot(auto.price, aes(x = engine.size))
+geom_histogram(aes(y = ..count..))
ggplot(auto.price, aes(x = engine.size))
+ geom_histogram(aes(y = ..count..), binwidth = 20)
ggplot(auto.price, aes(x = engine.size))
+ geom_histogram(aes(y = ..count..), binwidth = 20)
+ face)grid(. ~ drive.wheels)
ggplot(auto.price, aes(x = engine.size)) +
geom_histogram(aes(y = ..count..), binwidth = 20) +
face_grid(. ~ drive.wheels)
ggplot(auto.price, aes(x = engine.size)) +
geom_histogram(aes(y = ..count..), binwidth = 20) +
facet_grid(. ~ drive.wheels)
ggplot(auto.price, aes(x = engine.size)) +
geom_histogram(aes(y = ..count..), binwidth = 30) +
facet_grid(. ~ drive.wheels)
ggplot(auto.price, aes(x = engine.size)) +
geom_histogram(aes(y = ..count..), binwidth = 5) +
facet_grid(. ~ drive.wheels)
ggplot(auto.price, aes(x = engine.size)) +
geom_histogram(aes(y = ..count..), binwidth = 10) +
facet_grid(. ~ drive.wheels)
rg = range(auto.price[,engine.size])
rg = range(auto.price[,c("engine.size")])
bw = (rg[2] - rg[1])/30
ggplot(auto.price, aes(x = engine.size)) +
geom_histogram(aes(y = ..count..), binwidth = bw) +
facet_grid(. ~ drive.wheels)
ggplot(Income)
ggplot(Income, aes(x = income)) +
geom_boxplot()
ggplot(Income, aes(x = income)) +
geom_boxplot()
plot(ggplot(Income, aes(x = income)) +
geom_boxplot())
feature.names
ggplot(Income, aes(x = age)) +
geom_boxplot()
ggplot(Income, aes(x = income, y = age)) +
geom_boxplot()
ggplot(Income, aes(x = age, y = income)) +
geom_boxplot()
ggplot(Income, aes(x = income, y = age)) +
geom_boxplot()
source('C:/github/xunilrj-sandbox/sources/cousera-datascience/reproducible.research.week01.R')
source('C:/github/xunilrj-sandbox/sources/cousera-datascience/reproducible.research.week01.R')
source('C:/github/xunilrj-sandbox/sources/cousera-datascience/reproducible.research.week01.R')
source('C:/github/xunilrj-sandbox/sources/cousera-datascience/reproducible.research.week01.R')
source('C:/github/xunilrj-sandbox/sources/cousera-datascience/reproducible.research.week01.R')
source('C:/github/xunilrj-sandbox/sources/cousera-datascience/reproducible.research.week01.R')
source('C:/github/xunilrj-sandbox/sources/cousera-datascience/reproducible.research.week01.R')
source('C:/github/xunilrj-sandbox/sources/cousera-datascience/reproducible.research.week01.R')
source('C:/github/xunilrj-sandbox/sources/cousera-datascience/reproducible.research.week01.R')
source('C:/github/xunilrj-sandbox/sources/cousera-datascience/reproducible.research.week01.R')
source('C:/github/xunilrj-sandbox/sources/cousera-datascience/reproducible.research.week01.R')
unique(df$DRG.Definition)
source('C:/github/xunilrj-sandbox/sources/cousera-datascience/reproducible.research.week01.R')
source('C:/github/xunilrj-sandbox/sources/cousera-datascience/reproducible.research.week01.R')
source('C:/github/xunilrj-sandbox/sources/cousera-datascience/reproducible.research.week01.R')
